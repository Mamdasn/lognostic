{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lognostic","text":"<p>Documentation: https://Mamdasn.github.io/lognostic</p> <p>Source Code: https://github.com/Mamdasn/lognostic</p> <p>PyPI: https://pypi.org/project/lognostic/</p> <p><code>lognostic</code> is a lightweight, efficient Python package designed to seamlessly integrate into existing Python applications to provide logging statistics. This package caters to development teams seeking to optimize logging performance, diagnose issues, and understand logging loads without introducing significant overhead or complexity into their applications.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install lognostic\n</code></pre>"},{"location":"#development","title":"Development","text":"<ul> <li>Clone this repository</li> <li>Requirements:</li> <li>Poetry</li> <li>Python 3.9+</li> <li>Create a virtual environment and install the dependencies</li> </ul> <pre><code>poetry install\n</code></pre> <ul> <li>Activate the virtual environment</li> </ul> <pre><code>poetry shell\n</code></pre>"},{"location":"#custom-logging-handler","title":"Custom logging Handler","text":"<p>The <code>lognostic</code> module can be integrated into logging subsystems by employing a custom logging handler:</p> <pre><code>class LogHandler(logging.Handler):\n    def __init__(self, lognostic: Lognostic):\n        super().__init__()\n        self._lognostic = lognostic\n\n    def emit(self, log_record: logging.LogRecord):\n        self._lognostic.record(log_record)\n</code></pre> <p>A <code>Lognostic</code> instance should be given to the custom logging handler, so later logging statistics can be obtained:</p> <pre><code>lognostic = Lognostic()\nloghandler = LogHandler(lognostic)\nlogger.addHandler(loghandler)\n\nlogger.info('This is a test log message')\n\nlognostic.total_size() # -&gt; returns 26\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is automatically generated from the content of the docs directory and from the docstrings found in the source code.</p>"},{"location":"#testing","title":"Testing","text":"<p>Run unit tests using</p> <pre><code>pytest tests\n</code></pre> <p>Automated test runs: The <code>lognostic</code> package is automatically tested through python versions 3.9 to 3.12 using GitHub's CI/CD pipeline.</p>"},{"location":"#docker-usage","title":"Docker Usage","text":"<p>Build the image of the Dockerfile using</p> <pre><code>docker build -t lognostic .\n</code></pre> <p>Run the image with</p> <pre><code>docker run --name lognostic_instance lognostic\n</code></pre> <p>The docker builds the envioronment followed by running the pre-commits and unit tests.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>Pre-commit hooks run all the auto-formatters (e.g. <code>black</code>, <code>isort</code>), linters (e.g. <code>mypy</code>, <code>flake8</code>), and other quality checks to make sure the changeset is in good shape before a commit/push happens.</p> <p>You can install the hooks with (runs for each commit):</p> <pre><code>pre-commit install\n</code></pre> <p>Or if you want them to run only for each push:</p> <pre><code>pre-commit install -t pre-push\n</code></pre> <p>Or if you want e.g. want to run all checks manually for all files:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"#future-features-and-improvements","title":"Future features and improvements","text":"<ul> <li>Data persistency: Store statistics on the disk persistency for future historical logging analysis.</li> <li>Logging Dashboard: A web dashboard to visualize logging statistics in real-time, allowing teams to monitor logging load dynamically.</li> <li>Throw warning/error messages if certain logging thresholds are met, such as an unusually high logging rate, to quickly identify potential issues.</li> </ul> <p>This project was generated using the python-package-cookiecutter template.</p>"},{"location":"api_docs/","title":"API documentation","text":""},{"location":"api_docs/#lognostic.Lognostic","title":"<code>Lognostic</code>","text":"<p>Lognostic is a logging utility class designed to record, store, and analyze logging data. It captures logging information such as logger names, message sizes, and timestamps, providing functionalities to analyze this data for monitoring and debugging purposes.</p> <p>Attributes:</p> Name Type Description <code>_lock</code> <code>Lock</code> <p>A threading lock to ensure thread-safe operations on records.</p> <code>_records</code> <code>List[Dict[str, Timestamp | str | int]]</code> <p>A list to store logging records.</p> Source code in <code>src/lognostic/lognostic.py</code> <pre><code>class Lognostic:\n    \"\"\"\n    Lognostic is a logging utility class designed to record, store, and analyze logging data.\n    It captures logging information such as logger names, message sizes, and timestamps,\n    providing functionalities to analyze this data for monitoring and debugging purposes.\n\n    Attributes:\n        _lock (Lock): A threading lock to ensure thread-safe operations on records.\n        _records (List[Dict[str, pd.Timestamp | str | int]]): A list to store logging records.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\n        Initializes the Lognostic class by setting up the threading lock and initializing the list of records.\n        \"\"\"\n        self._lock: Lock = Lock()\n        self._records: List[Dict[str, Union[pd.Timestamp, str, int]]] = []\n\n    def record(self, log_record: logging.LogRecord) -&gt; None:\n        \"\"\"\n        Records a new logging event by appending it to the list of records.\n\n        Args:\n            log_record (logging.LogRecord): The log record to be recorded, containing the logger's name,\n            the log message, and other metadata.\n        \"\"\"\n        logger_name: str = log_record.name\n        message_size: int = len(log_record.getMessage())\n        with self._lock:\n            now = pd.Timestamp.now()\n            self._records.append(\n                {\n                    \"logger_name\": logger_name,\n                    \"message_size\": message_size,\n                    \"timestamp\": now,\n                }\n            )\n\n    def _dataframe(self) -&gt; pd.DataFrame:\n        \"\"\"\n        Converts internal records from a list of dictionaries to a pandas DataFrame.\n\n        Returns:\n            pd.DataFrame: A DataFrame containing all logging records.\n        \"\"\"\n        with self._lock:\n            return pd.DataFrame(\n                self._records, columns=[\"logger_name\", \"message_size\", \"timestamp\"]\n            )\n\n    def _get_recent_records(self, lookback_period: int) -&gt; pd.DataFrame:\n        \"\"\"\n        Retrieves records within the specified lookback period.\n\n        Parameters:\n            lookback_period (int): The lookback period in seconds.\n\n        Returns:\n            pd.DataFrame: A DataFrame containing recent logging records.\n        \"\"\"\n        df = self._dataframe()\n        time_window = pd.Timestamp.now() - pd.Timedelta(seconds=lookback_period)\n        recent = df[df[\"timestamp\"] &gt; time_window]\n        return recent\n\n    def total_size(self) -&gt; int:\n        \"\"\"\n        Calculates the total size of all logged messages.\n\n        Returns:\n            int: The total size of all messages.\n        \"\"\"\n        df = self._dataframe()\n        total_size = df[\"message_size\"].sum()\n        return cast(int, total_size)\n\n    def total_size_per_logger(self) -&gt; Dict[str, int]:\n        \"\"\"\n        Calculates the total size of logged messages per logger.\n\n        Returns:\n            Dict[str, int]: A dictionary mapping logger names to their total message size.\n        \"\"\"\n        df = self._dataframe()\n        return df.groupby(\"logger_name\")[\"message_size\"].sum().to_dict()\n\n    def total_logging_rate(self, lookback_period: int = 60) -&gt; float:\n        \"\"\"\n        Calculates the total logging rate over a specified lookback period.\n\n        Parameters:\n            lookback_period (int, optional): The lookback period in seconds. Defaults to 60.\n\n        Returns:\n            float: The average logging rate (message size per second).\n        \"\"\"\n        recent_records = self._get_recent_records(lookback_period)\n        total_rate = recent_records[\"message_size\"].sum() / lookback_period\n        return cast(float, total_rate)\n\n    def logging_rate_per_logger(self, lookback_period: int = 60) -&gt; Dict[str, float]:\n        \"\"\"\n        Calculates the logging rate per logger over a specified lookback period.\n\n        Parameters:\n            lookback_period (int, optional): The lookback period in seconds. Defaults to 60.\n\n        Returns:\n            Dict[str, float]: A dictionary mapping logger names to their average logging rate (message size per second).\n        \"\"\"\n        recent_records = self._get_recent_records(lookback_period)\n        return (\n            recent_records.groupby(\"logger_name\")[\"message_size\"].sum()\n            / lookback_period\n        ).to_dict()\n</code></pre>"},{"location":"api_docs/#lognostic.Lognostic.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the Lognostic class by setting up the threading lock and initializing the list of records.</p> Source code in <code>src/lognostic/lognostic.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\n    Initializes the Lognostic class by setting up the threading lock and initializing the list of records.\n    \"\"\"\n    self._lock: Lock = Lock()\n    self._records: List[Dict[str, Union[pd.Timestamp, str, int]]] = []\n</code></pre>"},{"location":"api_docs/#lognostic.Lognostic.logging_rate_per_logger","title":"<code>logging_rate_per_logger(lookback_period=60)</code>","text":"<p>Calculates the logging rate per logger over a specified lookback period.</p> <p>Parameters:</p> Name Type Description Default <code>lookback_period</code> <code>int</code> <p>The lookback period in seconds. Defaults to 60.</p> <code>60</code> <p>Returns:</p> Type Description <code>Dict[str, float]</code> <p>Dict[str, float]: A dictionary mapping logger names to their average logging rate (message size per second).</p> Source code in <code>src/lognostic/lognostic.py</code> <pre><code>def logging_rate_per_logger(self, lookback_period: int = 60) -&gt; Dict[str, float]:\n    \"\"\"\n    Calculates the logging rate per logger over a specified lookback period.\n\n    Parameters:\n        lookback_period (int, optional): The lookback period in seconds. Defaults to 60.\n\n    Returns:\n        Dict[str, float]: A dictionary mapping logger names to their average logging rate (message size per second).\n    \"\"\"\n    recent_records = self._get_recent_records(lookback_period)\n    return (\n        recent_records.groupby(\"logger_name\")[\"message_size\"].sum()\n        / lookback_period\n    ).to_dict()\n</code></pre>"},{"location":"api_docs/#lognostic.Lognostic.record","title":"<code>record(log_record)</code>","text":"<p>Records a new logging event by appending it to the list of records.</p> <p>Parameters:</p> Name Type Description Default <code>log_record</code> <code>LogRecord</code> <p>The log record to be recorded, containing the logger's name,</p> required Source code in <code>src/lognostic/lognostic.py</code> <pre><code>def record(self, log_record: logging.LogRecord) -&gt; None:\n    \"\"\"\n    Records a new logging event by appending it to the list of records.\n\n    Args:\n        log_record (logging.LogRecord): The log record to be recorded, containing the logger's name,\n        the log message, and other metadata.\n    \"\"\"\n    logger_name: str = log_record.name\n    message_size: int = len(log_record.getMessage())\n    with self._lock:\n        now = pd.Timestamp.now()\n        self._records.append(\n            {\n                \"logger_name\": logger_name,\n                \"message_size\": message_size,\n                \"timestamp\": now,\n            }\n        )\n</code></pre>"},{"location":"api_docs/#lognostic.Lognostic.total_logging_rate","title":"<code>total_logging_rate(lookback_period=60)</code>","text":"<p>Calculates the total logging rate over a specified lookback period.</p> <p>Parameters:</p> Name Type Description Default <code>lookback_period</code> <code>int</code> <p>The lookback period in seconds. Defaults to 60.</p> <code>60</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The average logging rate (message size per second).</p> Source code in <code>src/lognostic/lognostic.py</code> <pre><code>def total_logging_rate(self, lookback_period: int = 60) -&gt; float:\n    \"\"\"\n    Calculates the total logging rate over a specified lookback period.\n\n    Parameters:\n        lookback_period (int, optional): The lookback period in seconds. Defaults to 60.\n\n    Returns:\n        float: The average logging rate (message size per second).\n    \"\"\"\n    recent_records = self._get_recent_records(lookback_period)\n    total_rate = recent_records[\"message_size\"].sum() / lookback_period\n    return cast(float, total_rate)\n</code></pre>"},{"location":"api_docs/#lognostic.Lognostic.total_size","title":"<code>total_size()</code>","text":"<p>Calculates the total size of all logged messages.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The total size of all messages.</p> Source code in <code>src/lognostic/lognostic.py</code> <pre><code>def total_size(self) -&gt; int:\n    \"\"\"\n    Calculates the total size of all logged messages.\n\n    Returns:\n        int: The total size of all messages.\n    \"\"\"\n    df = self._dataframe()\n    total_size = df[\"message_size\"].sum()\n    return cast(int, total_size)\n</code></pre>"},{"location":"api_docs/#lognostic.Lognostic.total_size_per_logger","title":"<code>total_size_per_logger()</code>","text":"<p>Calculates the total size of logged messages per logger.</p> <p>Returns:</p> Type Description <code>Dict[str, int]</code> <p>Dict[str, int]: A dictionary mapping logger names to their total message size.</p> Source code in <code>src/lognostic/lognostic.py</code> <pre><code>def total_size_per_logger(self) -&gt; Dict[str, int]:\n    \"\"\"\n    Calculates the total size of logged messages per logger.\n\n    Returns:\n        Dict[str, int]: A dictionary mapping logger names to their total message size.\n    \"\"\"\n    df = self._dataframe()\n    return df.groupby(\"logger_name\")[\"message_size\"].sum().to_dict()\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#001-2024-03-06","title":"0.0.1 - 2024-03-06","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial setup of the PyPI Development Environment.</li> <li>Statistical functionalities for analyzing <code>LogRecords</code>.</li> <li>Unit tests covering class methods and thread-safety.</li> <li><code>pandas</code> package dependency in <code>pyproject.toml</code> for statistics calculation.</li> <li>MyPy typing annotations to source <code>.py</code> files for better type validation.</li> <li><code>pandas-stubs</code> for MyPy type validation, enhancing static type checking.</li> <li>Pre-commit hooks setup to enforce code style and quality checks.</li> <li>A Dockerfile to define the build environment and run tests, ensuring a consistent development environment.</li> <li>Documentation docstrings across <code>lognostic</code>, making the API self-documenting and easier to understand for developers.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Merged <code>stats_manager</code> and <code>lognostic</code> modules to streamline the package structure.</li> <li>Bumped Python version from 3.8 to 3.9, taking advantage of newer language features.</li> <li>Reduced redundancy by minimizing repeated code across the package, improving maintainability.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Applied fixes from <code>isort</code> to ensure consistent import ordering.</li> <li>General code quality improvements through the application of pre-commit checks.</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>N/A</li> </ul>"}]}